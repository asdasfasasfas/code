pwd  - 내가 지금 있는 폴더

mkdir - 폴더생성

dir - 모든 폴더보기

cd - 폴더 안으로 들어가기

폴더 안에 텍스트 파일 만들때 이름에 .txt없으면 보기-옵션 - 알려진 파일 형식의 파일 확장명 숨기기 체크 해제

git init - .git 디렉터리가 만들어짐

git diff - 같은 파일에 대해 워킹 디렉터리와staging area 파일을 비교함 

git diff --staged - 같은 파일에 대해 staging area 파일과 git 디렉터리 파일을 비교함

git config --global user.name "이름" -사용자의 이름 

git config --global user.email "이메일" - 사용자의 이메일

git config --global core.editor "'C:/Program Files/Notepad++/notepad++.exe' -multiInst -nosession"
 
.gitignore - git이 무시하는 폴더 --> dir해도 안나옴

.git폴더 - 숨김 폴더라서 dir해도 안나옴

git add * - 메모리에 올라감 (staging area)    *-->공백문자

git commit - 메모리공간에 있던 파일을 하드디스크로 올림 --> 메모리 공간은 비워짐 (staging area에 있는 파일을 git저장소로) --> working directory에서 staging area로 add 안하면 commit해도실행이 안됨.

rm -삭제 /git 저장소랑 관련없는 명령어. working directory에서 지운거라서 삭제해도 git저장소에 저장된 파일이면 복구가능

git rm -삭제/ git 프로그램에 의해 실행되는 명령어 

git mv README README.md - README파일을 README.md로 이름 바꾸기 


git cd ~ - 홈 디렉터리로 감

git clone 주소 - github주소의 폴더 복제

git tag -a 태그이름 -m "태그의 자세한 메세지" -현재 commit에 태그 만들기

git tag -d 태그이름 - 태그 삭제

git show 태그이름 - 태그 정보 알려줌

git tag -a 태그이름 원하는 commit -m"태그 설명" - 전에 했던 commit에 태그 만들기

git push origin - 내 컴퓨터에 저장한걸  github로 보냄 origin은 복제된 주소의 별칭

git push origin -d 태그이름 - 태그가 github에서도 삭제됨

branch이름 설정 안하면 master로 설정됨

branch - commit객체의 별칭 [ ex)master ]

git branch 이름 - branch 만듦. 제일 최근 commit을 가르킴

git checkout 이름 - HEAD가 가르키는 branch 바뀜

branch 바꾸고 commit하면 master branch는 바꾼 시점의 commit에 머물러 있음. HEAD와 바뀐branch만 다음 commit으로 이동

다시 master로 checkout하면 testing branch일 때 commit 한건 안나옴

git log --oneline --decorate --graph --all  - 역순으로 commit 을 작대기로 보여줌

git checkout -b 이름 - branch를 바꿈 (git branch 와 git checkout 명령어를 합친 것)

git merge branch이름 - master branch입장에서 branch를 합침

git init 폴더이름 - 폴더를 만들고 그 안에 git 저장소 생성
